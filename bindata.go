// Code generated by go-bindata.
// sources:
// doap.rdf
// openapi.yaml
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _doapRdf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x94\x5f\x4e\xdc\x40\x0c\xc6\xdf\xf7\x14\x56\x78\xe0\x29\x19\xa0\x7d\x28\xab\xec\x22\xd4\xd2\x0a\xa9\xad\x10\x3d\x81\x37\x71\xb2\x2e\x33\xe3\xc8\x9e\xec\x2e\x47\xe2\x1c\x5c\xac\x0a\x59\x52\x15\x50\x85\xe0\x6d\x64\xcf\xf7\xf3\x67\xcf\x9f\xf2\x6c\x17\x3c\x6c\x48\x8d\x25\x2e\xb2\xe3\xe2\x28\x03\x8a\x95\xd4\x1c\xdb\x45\xd6\xa7\x26\xff\x94\x9d\x2d\x67\xa5\xd6\xcd\xfc\xfa\xcb\x57\xd8\x05\x1f\x6d\xae\x75\xb3\xc8\xd6\x29\x75\x73\xe7\xb6\xdb\x6d\xb1\xfd\x50\x88\xb6\xee\xf8\xf4\xf4\xd4\x1d\x9d\xb8\x93\x93\x5c\xeb\x26\xb7\xdb\x98\x70\x97\x47\x3b\xc8\x66\x00\xa3\x74\x92\xf5\x46\x4d\xef\x39\x56\x45\x25\xc1\x45\x73\xb5\x60\x77\x90\x2d\x67\x00\xe5\x95\xca\x6f\xaa\xd2\xb0\x06\x28\x57\x7d\x9b\xd7\x98\x70\x85\x46\x30\xf8\x50\x32\xe9\xb5\xa2\x91\x65\x73\xe7\x2a\xa9\xa9\x08\x2a\x45\xc4\x40\x2e\xa8\xb8\x8e\xe3\x4a\x50\xeb\x8f\xb6\x46\x54\xcf\x8e\xcd\x7a\xb2\xcc\xed\xa1\x6b\x09\xd4\x61\xfb\x0e\xe0\x84\xe2\xd0\x79\x0a\x14\x93\x3d\x81\x6d\x8e\x9d\x74\x14\xb1\xe3\xe2\x16\x83\x9f\x04\x9e\x2b\x8a\xef\xe9\xc5\xb4\x72\x01\x2d\x91\xba\xef\x97\x9f\x2f\x7e\xfe\xba\x98\xd8\x01\x39\x26\xe4\x48\xfa\x5a\xfc\x24\x1d\x02\xcb\xa7\xb5\x8a\xaa\xe5\xd2\x3d\xa4\xc6\x5d\x9d\x4a\xab\x18\x02\xc7\x36\xf7\x18\xdb\x1e\x5b\x5a\xb6\x32\x2c\x4b\xf7\x62\x72\xd4\x29\x75\x62\x9c\x44\x6f\xc7\x00\x40\xf9\x8d\xd3\xf5\xb3\xe8\x70\xe0\x2a\xdb\x77\x8c\xe7\xb1\xa1\x71\xd6\x52\x61\x62\x89\x6f\xa6\x15\x2d\xa7\xbf\xc4\xd2\xbd\x60\xba\x74\x4f\x9b\x2b\x6d\x2d\x9a\xf2\x9a\xac\x52\xee\x1e\xea\xef\x82\x9f\x0f\x23\x59\x64\x14\xb3\xe5\x0f\xbc\x21\x48\x6b\x02\x32\xa3\x98\x18\x3d\x58\xbf\x32\x4a\xd0\x88\x42\x27\x96\x38\xb6\x90\x04\x10\xf6\x3e\x00\x37\xc8\x1e\x57\x9e\x60\xc3\x38\xc4\xc7\xfd\xd2\x3c\x70\x1e\x6d\xbb\x9a\x3c\x57\x2c\xbd\xc1\xf9\xd5\x65\x51\xba\x67\x4e\x5e\xe1\xb0\xd1\x6c\x79\x4d\xb1\x56\x02\x4f\x60\xd2\x5b\x3e\x5c\xd8\x30\x14\xdf\x1b\x26\x0f\x9d\xf4\x0a\xfe\x10\x9b\x86\xab\xf5\xf0\x94\x6a\x8c\x06\x7d\x9c\x1c\xd7\x6c\x9d\x44\x7e\xb4\x3c\x64\xfe\x41\xd5\x04\xfe\xf0\xfc\xea\xf2\x25\xf3\x01\x53\xaf\x04\x94\xe0\xfe\xae\x53\xe9\x37\xf7\x77\xf4\x9f\x6e\xb6\x7c\xc3\x6f\x7f\x4f\x83\x7a\x3c\xe3\xd2\x4d\x7f\x4f\xe9\xf6\x7f\xde\x72\xf6\x27\x00\x00\xff\xff\xd6\xe9\xa4\xd0\x25\x05\x00\x00")

func doapRdfBytes() ([]byte, error) {
	return bindataRead(
		_doapRdf,
		"doap.rdf",
	)
}

func doapRdf() (*asset, error) {
	bytes, err := doapRdfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "doap.rdf", size: 1317, mode: os.FileMode(420), modTime: time.Unix(1554233711, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _openapiYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x3a\xe9\x72\x1b\x39\x73\xff\xf9\x14\x5d\x4a\xaa\xb8\x5b\x45\x0e\x0f\x4b\xb2\xc5\x54\x2a\x51\xac\xdd\x2f\xf2\x67\x47\x2a\x59\xde\x5c\x95\x6c\x35\x07\x3d\x1c\x58\x33\xc0\x2c\x80\x11\x35\x55\x79\x9f\x3c\x48\x5e\x2c\xd5\xc0\x5c\xa4\x48\x9b\x96\xa5\xdd\x9d\x3f\x12\x71\xf4\x85\x46\x5f\xe8\xf1\x78\x3c\xd0\x05\x29\x2c\xe4\x02\x5e\x45\xd3\x68\x36\x90\x2a\xd1\x8b\x01\x80\x93\x2e\xa3\x05\x7c\x2c\x97\x96\x1c\xe8\x04\x5c\x4a\x70\x2d\xd5\x52\xa3\x11\x70\x7e\x7d\x39\x00\xb8\x27\x63\xa5\x56\x0b\x18\xce\x86\x03\x00\x41\x36\x36\xb2\x70\x7e\xe8\x7f\xc6\x03\x00\x80\xdb\xad\x5d\x20\x2d\x20\xac\xb1\x02\xa7\x41\x2a\x47\x06\x63\x07\x85\xd1\x2b\x83\x39\x3a\x19\x63\x96\x55\xb0\x96\x2e\x85\x4a\x97\x06\x96\x5a\xdf\xe5\x68\xee\xec\xc8\x83\x53\xda\x91\x05\x54\x02\xb4\x4b\xc9\x74\xa0\x05\x3a\x8c\x06\x7e\xcd\xbf\xa6\x64\xe8\x9e\x0c\x14\xda\x5a\xb9\xcc\xe8\x11\xe9\x50\x5a\xb2\x7e\xd4\x62\x4e\x60\x2b\xe5\xf0\xc1\x43\xcd\xc9\xa5\x5a\x80\xc2\x9c\xd1\x58\x0f\x8f\xd7\x5d\x50\x26\x63\xa9\x4b\x0b\xbf\xcc\x18\x42\x04\x1f\x89\x40\xc8\x24\x21\x43\x2a\x26\x0b\x89\xd1\x79\x6f\x59\xa2\x0d\x20\x24\x65\x96\x41\x26\x2d\x0b\xd0\xc3\x42\x43\x68\x61\xcd\x14\x7a\xb8\xe7\xd7\x97\x16\x84\xbc\x27\xb3\xa2\x9a\xfc\x9f\x4b\x57\x1a\x82\x84\x90\xff\x5a\xc8\xb1\x82\x25\xf9\xa9\x31\x60\xe9\xf4\x38\x91\x59\x06\x5a\xc1\xa4\xd0\xd6\xd9\xc9\x8a\x9c\x47\x57\xaa\x3b\xa5\xd7\x0a\x4a\x93\xd9\x7a\xb9\xd2\x0a\x3e\xdd\xbe\x05\x27\x73\x6a\xc6\x48\xc5\x99\xb6\x1e\xf4\x0f\x32\xc7\x15\xd9\x11\xb8\xb4\xcc\x97\x0a\x65\x66\x47\x80\xa5\x90\x7a\x04\xf7\x52\x90\xfe\x71\x00\x10\x6b\xe5\x30\x76\x0b\xbf\x9d\x72\x94\xd9\x02\x8a\x5a\x98\x63\x2c\xe4\x3f\xe6\x46\x47\x2c\xb0\x70\x40\x98\xd3\x02\x36\x86\x4a\x93\x2d\x20\x75\xae\xb0\x8b\xc9\x24\xd6\x82\xa2\x66\x7a\x92\x1b\x3d\x69\x60\x1d\xdb\x14\xd1\x64\x72\x40\x0f\x8e\x8c\xc2\xec\x42\xc7\x96\xb1\xfa\xfd\x47\x51\x34\xc1\xa5\x2e\xdd\xd1\xb6\xa2\x5d\x5c\x9d\x5f\xc3\xcd\xc5\xcf\x03\x4b\x86\x15\x72\x31\x18\x6f\xa2\x14\x94\xeb\x0e\x65\x8d\x65\x7c\x3f\x8d\x8e\x67\xcb\x47\xd8\xa3\x78\x25\x27\xf7\xb3\x83\x61\xcc\xa6\xd1\xfc\xbb\x80\xac\x74\xf7\xdf\x9e\x7d\x58\xc8\xa8\x41\x11\x49\xc5\x2b\x0a\x74\xa9\x17\xce\xd1\xa4\xbe\xbf\x51\x85\x79\x76\x14\x4e\x69\x45\xf5\x71\x01\x38\x5c\xd9\xe6\xff\x31\x60\x21\xeb\xff\x6d\x99\xe7\x68\xaa\x85\xbf\x0e\x3d\x79\xd6\xd3\xba\x20\x83\xfc\xfb\x52\x2c\xc0\xcb\xfd\x2a\xa0\xa9\xe7\x0d\xd9\x42\x2b\x4b\x2d\x6c\x80\xe1\x7c\x3a\x1d\x76\x3f\xb7\x4e\x69\x37\x1a\xfe\x58\xbf\x48\xb9\xfe\x4e\x00\x47\x0f\x6e\xf2\x30\x66\x9e\x36\x27\x00\x6c\x9c\x52\x8e\xdb\xa3\x00\xae\x2a\x68\x01\xd6\x19\xa9\x56\x5e\x30\xa5\x25\xc3\xb2\xfb\xd5\xe9\x3b\x52\x5f\x13\x0d\xaf\xde\x96\xcd\x0d\xb9\xd2\xa8\x60\x29\x78\x7e\x68\x3d\x1f\x1e\x1e\xfc\xc0\x77\x2e\xc7\x3b\xa9\x56\x7e\x94\x2d\x97\xf5\x96\x4b\x97\x0e\x10\x0a\xb4\x76\xad\x8d\xf8\x31\xda\x29\xd3\x42\xde\x32\x98\x7a\xae\x40\x83\x39\x39\xaf\xbe\x0d\x45\x47\x7f\x6b\x28\x39\x5a\xc0\xd1\xdf\x4c\x62\x9d\x17\x5a\x91\x72\x76\xd2\xad\x9c\x24\xda\xe4\xe8\xae\x79\xe0\xe8\xc9\xe7\xc2\x26\x25\x1d\xbb\x1e\x2d\x7b\x0f\x05\x8b\x22\x93\xb1\x67\x61\xf2\x70\xf8\xc1\xec\x58\x0a\xad\xa5\x30\x64\xcb\xcc\x7d\xed\x30\x37\x3f\x7a\xc0\xbc\x60\xe7\xf4\x6f\x57\x7f\x79\x73\xfa\xd3\xeb\x77\x97\xff\xfe\xe1\x72\x2f\xa5\x9f\xad\x56\x87\x92\x5a\x18\x3e\x24\x27\xfb\xf2\xeb\xbe\x40\xeb\xae\x99\xaf\xd1\x34\x3c\x99\xce\xf6\x9f\x41\xed\x2a\x9b\xef\x2d\x2a\xa5\x1d\x38\xca\x32\xc0\xa0\x6c\x11\x5c\xe6\xb8\x92\x8a\x00\xc1\x3a\x74\x94\x91\xb5\x90\xe0\xff\xfd\x2f\x0a\x82\x54\x0a\x56\x42\x84\xda\x90\xc0\x12\xe3\x3b\x52\x02\x5c\x8a\x0e\x52\xb4\xa0\x34\x48\x41\xc8\x6e\xdc\x96\x71\xca\x60\x53\xbf\x85\x7d\x69\xa7\xd3\xd1\x06\x1d\x57\x2a\xab\x40\x26\x5e\x41\x60\x8d\x96\xb7\xc6\x64\x6d\x52\x66\xa3\xe0\x7e\xd7\xd2\x12\xbb\x69\xbe\x55\x80\x70\x3c\x9d\x4d\x8e\xa7\xaf\xa2\x83\x2e\x77\x91\xa1\x3c\xf8\x5c\x0e\x53\x87\x93\xe9\xac\xbe\x9b\x9e\x64\x16\xa2\x2d\x8b\x42\x1b\x47\x62\xc4\x17\x18\xfe\xf9\xf6\xf6\x1a\xfe\x09\xad\x8c\x23\x6f\x22\x5a\x07\xfa\x35\xeb\xe0\x17\xee\x33\x0f\x5a\x11\xb0\x2d\xd0\x86\xc2\x42\x76\xce\x08\x56\xaa\x55\x46\x20\xb0\x82\x1c\x5d\xec\x05\xce\x96\x04\xcd\xaa\xcc\xf9\x2e\x47\x70\x99\xb4\xdc\x28\xcd\x31\x8c\x07\x54\x9a\x8c\xc3\xa4\x95\xbc\x27\x35\xaa\x47\x13\xc8\xb5\x75\x60\x28\x26\xe5\xda\xa8\x08\xd6\x1c\x0a\x2c\xbd\x75\x12\x8d\xdc\x37\x74\xeb\x32\xf1\x86\x89\x44\x88\xa9\x10\x2a\x72\x6d\xa4\xf0\xe9\xe6\xfd\xc8\x7b\x19\xf8\xcb\x4f\xb7\x9e\x36\x1f\xf5\xf9\x48\x68\x55\x92\xb5\x2d\x75\x2c\x8d\x10\xe2\xf0\xaa\x4f\x37\xef\x77\xd9\xb4\x15\xb9\x6b\x6d\xdd\x33\x9b\xb4\x71\x6d\x29\x1c\x76\x47\x2f\xd5\x02\x7e\x2b\xc9\x54\x83\x9d\x17\x2a\x91\x99\x23\x03\xcb\x0a\xca\x82\xe3\x4c\x97\x1a\x22\xcf\xc3\x60\xbf\xa6\xed\xa6\x2d\xac\xb3\x13\x87\xab\x6d\x82\x84\x3b\x94\x1e\xe3\x15\xa5\xb6\x1f\xb6\x3d\x3d\x12\xac\x28\x2e\x95\x96\x95\xe4\xc9\xa4\xb1\x82\x1c\x1d\x2e\xe2\xd2\x64\x5e\xbe\x57\x85\xdb\xe6\x28\x27\x87\x87\xf2\x24\x55\x9c\x95\x82\x0d\x52\x9c\xa2\x5a\x11\x08\x72\x14\xf3\x1c\x58\xb9\x52\x3e\x78\x05\xc9\xf7\x80\xa1\x02\x3a\x67\xe4\xb2\x74\xf4\x64\x36\x2b\xb2\xbf\x2a\xfd\x64\x47\x97\x68\xfd\x42\xfe\xed\xcb\x64\x7b\x83\x70\xd4\xb3\x36\x28\xc4\x93\xac\xcd\xb9\x10\x80\xad\xee\x44\x70\xde\x98\x91\x70\xb3\x6d\x8a\x82\x84\x37\xfd\x2b\xa3\x4b\x25\x38\xd7\x00\x43\xbf\x95\xd2\x74\xb6\x61\x33\x06\x11\xe2\x45\xee\xeb\xc1\x2a\xf8\xe8\x46\xed\x08\x10\xbf\xa2\x86\xb7\xde\x60\xd5\xe9\xa9\x74\x94\x47\x70\xcb\x17\x2a\x91\x94\x09\xb6\xa2\xa5\x4a\xb4\x71\xa5\x62\xa7\x59\x79\x3c\x02\x86\x3d\x10\xc3\xde\x79\x72\x44\xc7\x02\x5c\xa3\x11\x16\x98\x76\x74\x72\x29\x33\xe9\xea\x94\x94\x91\x88\x36\xc7\x0b\x49\x70\xa3\x8f\x41\xd0\x0b\x70\xa6\x7c\xba\x92\x7b\xfb\xbb\x2d\x16\x4e\x88\x94\x20\x71\xa8\x4c\x2e\xba\x1f\x9b\x92\x79\x1b\x3c\xc1\xb0\x01\x38\xfc\x12\xc7\x3d\x9a\x3d\xef\xbb\xf9\xfe\x66\x06\xe9\xe1\x91\xd9\xd9\x30\xcc\x5f\xe1\xed\x7d\x48\xa6\x6b\xc3\x3e\x9b\x4e\xff\x40\xb3\x1e\x1b\xf2\x77\xc9\xa7\xd7\x5e\x94\xde\x96\x77\x57\xf4\x82\x12\xf4\x16\xdf\x69\x88\x4b\x63\xd8\x75\xf3\xda\x08\x2e\xd0\x91\x75\x98\x17\xb6\x47\xaa\x0f\x20\x5c\x8a\x0a\x66\x53\xc8\xa5\x2a\x7d\xad\x23\x25\x14\x3e\x70\xf3\xe9\x6d\xc0\xd5\xb8\x7d\x43\x96\x5c\x1f\x7a\x58\xd4\x83\xc9\xcb\xbf\xcb\xb3\x30\x80\x6d\x11\x19\x2a\x32\x8c\xe9\x50\x39\xdd\x84\xe5\x80\xaa\x02\x7a\x90\xd6\x71\x24\xd4\x0b\x61\xfc\xc5\x92\x96\xc3\x8a\x56\x66\x7c\x75\x2b\xb2\xfd\x58\xf2\x92\x65\xe0\xb9\x55\x7a\x14\x44\xe0\x52\xa3\xd7\x1c\xc2\x92\x31\xda\x70\xb0\xda\x82\xf5\x88\x9e\xae\x18\x9b\xde\xa6\x61\xdc\xa6\x68\x0e\xbf\x87\x1f\xf0\x8e\x3a\x82\x8a\x72\x99\xc9\x78\x83\xc1\x61\x45\x76\x08\xa5\xf2\xd1\x3c\x27\x98\x3e\x58\x27\x85\xcb\xac\x87\x25\x54\xa0\x86\x16\xef\x09\x90\xcf\xbd\x29\x89\x71\xf8\x5e\x18\x79\x8f\x8e\x86\x61\xbb\x25\xc7\xc2\x1d\xb1\xe3\x5d\xa7\x32\x4e\x21\x46\xcb\x26\xcb\xa3\xec\x41\x64\xe4\x4a\x0f\x9f\x59\x3c\x4e\x1b\xc2\x6f\x10\x0f\xf3\xc0\xbc\xb5\x32\x42\xb6\xd7\x0c\x63\x53\x4c\xcf\x47\xe9\x21\x61\xc3\x6e\x78\xed\xce\xc9\x85\x56\xd4\x77\xe8\x82\x32\x72\xf4\x24\x9f\x7e\xe1\xb7\xf6\xdd\xfa\x2e\x3f\x1d\x10\xfc\x39\x5c\xf5\xf3\x0a\x90\x45\x74\x48\xfa\xd5\xb3\xf1\x8f\xb2\xaf\xcd\x2a\x6b\xbf\x56\xe3\x93\x16\xcc\xb4\x5a\x75\xde\x5b\x95\xf9\x92\x8c\x5f\xd8\xd6\x44\xeb\x2b\x56\xc1\x9a\xcc\x66\x2a\xb5\x9d\xde\xdc\x76\x74\xfc\x71\x15\x1b\xb6\x7b\x7d\x9f\xf7\x3b\x56\x6b\xb6\xf0\xd6\x92\xf8\x62\xd1\xc4\xe1\x6a\x77\xc5\x24\xe4\xf4\x68\x0c\x56\x3b\xe7\x39\x64\xd9\x09\xb1\xdb\xac\x97\x9f\x29\x7e\x5c\x3c\x3a\x84\xac\xf0\xc5\xba\xdc\x16\xdb\xe6\xb7\x47\x1a\xdd\xd7\xe6\x35\x5b\x81\xdf\x3e\x92\xa5\x72\xb4\xda\xf0\xd0\xdb\x5f\x57\xce\xd8\xbb\x68\xaf\x4c\x9f\x9d\xe8\x96\x98\x90\x3e\xd5\x37\xf6\x30\x8b\xb7\xeb\xd2\x36\x06\x4f\x75\x81\x80\xc3\xd5\x17\xac\xde\x6d\x9b\xf5\xff\xbe\xf5\x84\xe7\x8a\xe7\xbb\xf8\xf2\x05\x2c\xa7\x21\x66\xe5\x69\xc6\x93\x77\xf2\x39\x38\x5c\x8d\x40\x1b\x48\x34\xe7\x4b\x8e\x23\x07\xa7\x0f\x3a\xa0\x80\xfd\xe5\x0e\x48\x67\x07\x87\x12\x43\xa5\x59\x99\x7d\x99\x8d\x23\x06\xa5\x5d\x88\x7c\x2c\x29\x2b\x9d\xbc\xa7\xe1\x0b\x9e\x6c\x43\xb0\xa2\xf5\xa1\x04\xcb\x04\x28\x2f\x5c\x35\x62\x52\x7d\x65\xd0\xc7\xb3\x29\x16\x45\xaf\x0e\xff\x67\x56\xc2\x6e\x8a\xf7\x6e\x9f\x7d\xef\x58\x1b\xd0\x41\x46\x61\x62\xb0\x5b\x48\xdb\x8c\x7d\x99\xad\x00\x2a\x70\xd6\x84\x29\x9b\xc8\x4a\x93\xed\xc1\xb4\x53\xb2\xdf\x86\xfe\xd3\xcd\xfb\x4d\xdc\x57\x85\x3b\x14\xfd\x93\x30\x6d\x9d\x1d\x1f\x43\x03\x61\xeb\x49\x47\xb1\x64\xb2\x76\x43\xbd\xe8\x51\x94\xf0\x85\x08\x61\x57\x74\xb0\xc3\xad\xec\x7d\xc3\xd9\xef\x7c\x63\x2d\xe8\xb1\x77\x6a\xfc\xcc\xa3\x89\x31\x08\xad\x1e\x7b\xa8\x31\x58\x9d\x53\x7d\x73\x38\xf1\x5d\x1b\xbd\xe3\x69\x60\x8f\x27\x7c\xec\xff\x6a\x51\x87\xc5\x3d\xf7\xba\xe3\xe1\x61\x43\xd6\xa1\x0c\x31\x3f\x39\x81\x38\x45\x83\x31\xdf\x80\x08\x3e\x60\x15\x4c\x90\x56\x0e\xa5\x82\x58\xe7\x39\x5a\xb6\xb2\xeb\x54\x3a\xb2\x05\xc6\x14\xc1\x75\x46\x68\x3b\xd6\x96\x04\xb8\xc6\x50\x01\x70\x21\x76\x5d\xd2\x4a\x2a\x25\x9b\xf8\x15\xa1\x20\x23\x75\xa8\xec\x39\x43\xe8\x48\xf4\x72\x40\x5f\xb6\x77\x46\xae\xfa\xf1\x85\x2d\x28\x96\x98\xb5\x6b\x1c\xae\xc0\x52\x8e\xca\xc9\xb8\xce\xae\x3f\xdd\xbc\x3f\x94\x5d\xb4\x9c\x4b\x4a\x45\x02\x96\x15\xdc\xfc\xfc\x16\x5e\x9d\xbd\x39\x8d\x38\x26\xd5\x6b\x12\x41\x8c\x64\x3d\x81\xa9\x73\x45\x78\x5d\xb0\x23\xf8\x8c\xf7\x18\xe0\x8c\x5a\xd2\x72\x94\x99\xd3\x23\x48\x5c\xe1\x49\x4f\x64\x46\x91\x6f\x18\xf9\x88\x09\x1a\x39\xf6\xb4\x27\x32\x86\x84\x5a\xd8\xbe\x7f\xa4\xc6\xb6\x2c\x9d\x37\x9b\x7d\x11\xf6\xc4\x82\x60\x2b\xa5\x55\x95\xfb\xd2\x0c\x13\x12\xf8\x0d\x9d\x2d\xdf\x71\xc0\x90\x35\xba\xe6\xe8\xc1\x7d\x1b\xa4\xd3\x93\x93\x57\xa7\xdb\xb0\x22\x38\x57\x15\x9f\x83\x6d\x2b\x3b\xbe\xd1\x23\x93\xea\x4e\x26\x92\x04\xac\xd3\x9e\x5b\x10\xd2\x16\x19\x56\x4d\x9a\xd2\x54\x69\x0e\x25\x64\xd8\x76\x84\x38\xcc\x0b\xef\xf0\x7d\xc5\xd4\x9b\xd3\x05\xcc\xa7\xb3\xe9\x78\x36\x1f\xcf\x66\xb7\xb3\xb3\xc5\xf1\x9b\xc5\x74\xfe\x1f\x11\xfc\x82\x99\xf4\x5d\x36\x9d\xc2\x1a\x5f\xf6\x97\x16\xde\xa1\x82\xd9\x08\x66\x70\x7e\xc1\x2c\xbe\x43\x55\xa2\xa9\x78\x68\x3e\x9b\x4e\xe1\x07\x3e\x27\x4b\xe4\x9b\x77\x60\x49\x99\x5e\x87\x96\x02\x48\x42\xab\x4b\x4b\x8b\xfd\x31\x6a\xfc\x74\x1b\x78\x0e\x77\xd1\x33\x6c\x19\xff\x26\xa6\xfd\x53\xda\x7e\x7e\x23\xf8\xc8\x41\x51\xe0\x8b\x55\xbd\x16\x2c\x53\xdb\x45\x10\xbb\x28\x0b\x73\xa1\xd4\x70\x28\x45\x9c\x8d\x66\xd2\x91\xc1\xac\x5e\x55\xd7\x83\xb4\xe9\x57\x3c\x3a\x74\xcd\x58\x2e\x4e\x0e\xc5\xf1\x6a\xde\xa9\x1a\xa4\xf4\x80\x82\x62\xc9\xae\xe1\xc3\xc5\x09\xa4\x68\x53\xbf\xa9\xce\x49\x36\x81\x6e\x26\x2a\x5b\x4f\x3f\x7e\x2a\x48\xb2\x91\xd7\x34\x8a\xe6\xff\xfd\x6a\xde\xf3\xfe\xdf\x23\x88\xcf\x56\xab\x20\x89\x87\x3c\x7b\x24\x0a\x9e\x6d\x21\xf9\x32\xd1\x82\x4d\xbd\x1f\xf2\x75\x96\x4d\xd4\xfd\x1c\x73\x97\x63\x12\x1b\x29\xe0\x9e\xb7\xe6\x47\xae\x64\x7f\x12\x75\x88\xee\xc2\xe3\x34\xee\x19\x11\xaf\x69\x29\xe8\xbe\x9d\x29\x6d\x77\xba\xcf\x8c\xa9\xd7\x36\xb3\x95\xb0\xef\x4c\xd1\xb7\x50\x84\xf8\xa1\xe8\x2a\x5b\xfb\x22\x87\xd4\x50\xb2\xd5\x44\xb0\xaf\x25\x60\x87\xcf\xff\x52\xbe\xdb\x72\xc2\x0e\x62\x31\x99\xac\xd7\xeb\x28\xd5\x6b\xa7\x7d\x75\x9f\xa2\x58\x47\xe5\xdd\xc4\x95\x4e\x1b\x89\x59\x78\xc0\x20\x23\x2d\x45\x45\x5a\xfc\x83\xd0\xf9\xdf\xcf\x7a\xf0\xfa\x8a\xfd\xb2\xe4\xbe\xc3\x7b\xfc\xe8\x71\xc1\xc5\xd5\x07\x30\x54\x77\x22\x6e\x1c\x52\x78\xe6\x79\x61\x4a\x84\xce\x77\xa2\x67\xfb\xf2\xc2\xa8\xe3\xe9\xfc\xd5\x1b\x11\x4f\xe3\xe3\xe3\x64\xfa\x5a\x20\x09\x71\x86\xb3\x44\x9c\x2d\x97\x82\x68\xd9\xaf\xa1\xe7\xe4\xf0\x85\xa9\x39\x9b\x9f\x9d\x9c\xe1\xd9\x69\x22\x4e\xcf\x66\xc7\xa7\xf1\x49\x42\xaf\xe3\xa5\xa0\x53\x3a\x79\x3d\x9f\x26\xf3\xde\x2e\xdf\x3e\x63\x5f\x98\x9e\x93\x7e\x05\xe9\x51\xcd\xe8\x45\xf4\xa0\x8b\xf3\xb6\x6d\x50\x78\x8a\x7a\x61\x12\x38\x97\x3d\x19\xcf\x66\xe3\xf9\x9b\xdb\xe9\xc9\x62\x7e\xba\x98\x9e\x45\xd3\xe9\xd4\x1b\x5d\x4b\x71\x69\xa4\xab\x3e\x86\x20\x35\x20\xf0\xcd\x40\xe7\xa5\x4b\x37\x5d\x06\x1b\x83\x7e\xae\x46\x0b\x58\xf2\x4a\x3f\xc6\xcb\x7d\xf3\xde\x96\x9b\x29\xe4\x5f\xa9\xda\x93\xf1\x05\x4b\x87\xa5\x4b\x7f\xed\xf7\xda\xed\xeb\x03\x3b\x0f\x3d\x4c\xc4\x61\x7a\xfd\xc6\xe8\x1b\x9b\x7c\xf7\xb4\x4d\xb5\x71\xa0\x0b\xfc\xad\x24\x90\x82\x17\x25\xb2\xf3\xc7\xec\x7d\x5b\x40\x43\x36\xd0\x1e\xf9\xed\xd5\x5f\x7f\xfa\x97\x61\xdd\x64\xcc\xdf\x27\xcb\xf1\x67\x8c\x0a\x12\xe9\x9b\xc5\x48\x9a\x5e\x7f\xa3\x6f\x4d\xe1\xa1\xfa\x51\xc9\x42\x81\xab\x10\xa0\x57\x7e\x17\xe7\xd0\xd4\xb3\xdc\x08\x8a\xd6\x4d\x03\x96\xf3\xaf\x7d\x7c\xe4\x7f\x17\xc2\x2d\x1f\xd8\x4a\x75\xcf\x71\xa4\x4f\x44\x3c\xec\xc2\xd0\x7d\xf3\xa6\xdc\xf4\xa0\xf5\x84\x50\xf1\x5e\x23\xc6\x05\x1a\x57\x81\xe5\xdc\xa9\xdf\x72\x59\x53\xe0\xfb\xad\x96\x94\x62\x96\x80\x4e\xba\x4e\x6f\x66\xbd\x2b\x57\xfb\xee\x25\x54\xa0\x4b\x67\xa5\xa0\xe6\x3d\xf5\xc3\xa7\x8f\xb7\xbe\x37\xcc\x53\xb9\x25\xf4\xba\x1d\x5c\x2a\xeb\xc2\x2b\x6c\x97\x57\xb1\x3f\xa8\x1b\xba\xea\xe7\x86\xa6\xe1\x33\x82\x5f\xa4\xce\xd0\x69\xd3\x85\xf3\xcb\x4c\xc7\x77\x24\x02\x11\xa5\xad\x77\x76\x9c\x5e\x5f\x46\x83\x46\x3f\x17\x83\x71\x4f\xc5\xe0\x3f\xff\x6b\x30\xee\xa9\x29\xff\x0e\xf5\xbd\xa6\xec\x14\xba\x72\xb7\xbb\xa6\xb7\xfa\xae\xfb\xfd\xc3\x4d\x1b\xef\x66\x23\x45\x4a\xa0\x8d\x5c\x49\x85\xd9\x66\x9f\xff\xff\x07\x00\x00\xff\xff\x21\xda\xaa\x31\x25\x30\x00\x00")

func openapiYamlBytes() ([]byte, error) {
	return bindataRead(
		_openapiYaml,
		"openapi.yaml",
	)
}

func openapiYaml() (*asset, error) {
	bytes, err := openapiYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "openapi.yaml", size: 12325, mode: os.FileMode(420), modTime: time.Unix(1554236102, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"doap.rdf":     doapRdf,
	"openapi.yaml": openapiYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"doap.rdf":     &bintree{doapRdf, map[string]*bintree{}},
	"openapi.yaml": &bintree{openapiYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
