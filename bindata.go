// Code generated by go-bindata.
// sources:
// doap.rdf
// openapi.yaml
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _doapRdf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x93\x4f\x6f\xdb\x3c\x0c\xc6\xef\xf9\x14\x82\x0b\xbc\x37\x9b\x6d\xde\x1d\x96\x4c\x71\x0f\x5b\xf7\x07\x18\x86\x20\xfd\x04\x8a\xac\xc8\xdc\x2c\xd1\x20\xe5\x39\xbd\xec\xb3\x0f\xae\x12\x0f\x68\x73\x6a\x4e\x16\x28\x3f\x3f\x3e\x14\x49\x7d\x7f\x0c\x9d\xfa\xed\x58\x90\xe2\xa6\xb8\xab\x6e\x0b\xe5\xa2\xa5\x06\xa3\xdf\x14\x43\x3a\x94\xef\x8b\xfb\x7a\xa1\xb9\x39\xac\x77\x9f\x3e\xab\x63\xe8\xa2\xac\xb9\x39\x6c\x8a\x36\xa5\x7e\x0d\x30\x8e\x63\x35\xfe\x5f\x11\x7b\xb8\x5b\xad\x56\x70\xbb\x84\xe5\xb2\xe4\xe6\x50\xca\x53\x4c\xe6\x58\x46\xb9\x29\x16\x4a\x65\xe9\x2c\x1b\xc4\x1d\x86\x0e\xa3\xad\x2c\x05\x88\x02\x0d\x99\xfe\xa6\xa8\x17\x4a\xe9\x2d\xd3\x4f\x67\xd3\x74\x56\x4a\xef\x07\x5f\x36\x26\x99\xbd\x11\xa7\x26\x1f\xec\x84\x06\xb6\x2e\xb3\x64\x0d\x60\xa9\x71\x55\x60\xaa\xa2\x09\x0e\x02\x13\xf4\x18\xf7\x64\xb8\x79\x27\xad\x31\xdc\x21\xa0\xc8\xe0\xa4\x80\x13\xb4\xa5\xe0\x7a\xe3\xaf\x00\xce\xa8\x0e\xad\x8b\xd7\x58\x13\xb6\x10\x8c\x24\xc7\xf0\xfd\xdb\xc7\x87\x1f\x8f\x0f\x33\x3b\x18\x8c\xc9\x60\x74\x7c\x01\xbf\x06\x98\xc1\x7f\x82\x9b\x45\x53\xa0\x7e\x99\xa5\xb2\x1e\x35\x3c\x5f\xe5\xbf\x7a\x26\xcf\x26\x04\x8c\xbe\xec\x4c\xf4\x83\xf1\xae\xf6\x34\x1d\x35\x5c\xbc\xcc\x3a\x76\x3d\x09\x26\xe2\xa7\x1c\x50\x4a\x7f\xc1\xb4\x7b\x15\x9d\x3a\xc7\x34\x5e\xf1\x30\xe7\x82\xf2\x2b\x93\x35\x09\x29\xbe\x99\x56\x79\x4c\xff\x88\x1a\x2e\x98\xd6\xf0\xb2\x38\x2d\x2d\x71\x2a\x1b\x27\x96\xb1\x9f\xf2\xd7\xbb\x21\x2a\x69\x55\x72\x92\x54\x8e\x8a\x32\xde\x60\x94\xa4\xc2\xd0\x25\xec\x3b\xa7\xb6\x5f\xb7\xea\x3f\x13\xfa\x0f\xea\xd4\x28\x8f\xa9\x1d\xf6\xcf\xb3\x7e\x6e\xfb\x63\xfe\x9e\x97\x4f\x2a\x0d\xaf\xb3\x65\x17\x23\xfe\xc2\xb7\xcf\xd7\xa4\xce\x95\x6b\x98\x57\x4b\xc3\x69\xa5\xeb\xbf\x01\x00\x00\xff\xff\x00\x8c\x7e\x5d\x03\x04\x00\x00")

func doapRdfBytes() ([]byte, error) {
	return bindataRead(
		_doapRdf,
		"doap.rdf",
	)
}

func doapRdf() (*asset, error) {
	bytes, err := doapRdfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "doap.rdf", size: 1027, mode: os.FileMode(420), modTime: time.Unix(1553807079, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _openapiYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x3a\xeb\x6e\xdb\x38\x97\xff\xfd\x14\x07\xd9\x05\x3c\x03\xd8\xf2\xa5\x49\xda\x78\xb1\xd8\xcd\x36\x33\xb3\xe9\xb4\x9b\x20\x4d\x66\x6f\xd8\x1d\x1c\x8b\x47\x16\x1b\x89\xd4\x90\x54\x1c\x01\xdf\xfb\x7c\x0f\xf2\xbd\xd8\x87\x43\x4a\x96\x7c\x6b\xdd\x34\x99\x19\xfd\x49\x2c\x91\xe7\xce\x73\xe3\x19\x0e\x87\x3d\x5d\x90\xc2\x42\xce\xe0\x55\x34\x8e\x26\x3d\xa9\x12\x3d\xeb\x01\x38\xe9\x32\x9a\xc1\xc7\x72\x6e\xc9\x81\x4e\xc0\xa5\x04\xd7\x52\xcd\x35\x1a\x01\xe7\xd7\x97\x3d\x80\x07\x32\x56\x6a\x35\x83\xfe\xa4\xdf\x03\x10\x64\x63\x23\x0b\xe7\x5f\xfd\x65\xd8\x03\x00\xb8\xdd\xd8\x05\xd2\x02\xc2\x12\x2b\x70\x1a\xa4\x72\x64\x30\x76\x50\x18\xbd\x30\x98\xa3\x93\x31\x66\x59\x05\x4b\xe9\x52\xa8\x74\x69\x60\xae\xf5\x7d\x8e\xe6\xde\x0e\x3c\x38\xa5\x1d\x59\x40\x25\x40\xbb\x94\x4c\x0b\x5a\xa0\xc3\xa8\xe7\xd7\xfc\x67\x4a\x86\x1e\xc8\x40\xa1\xad\x95\xf3\x8c\xb6\x48\x87\xd2\x92\xf5\x6f\x2d\xe6\x04\xb6\x52\x0e\x1f\x3d\xd4\x9c\x5c\xaa\x05\x28\xcc\x19\x8d\xf5\xf0\x78\xdd\x05\x65\x32\x96\xba\xb4\xf0\xcb\x84\x21\x44\xf0\x91\x08\x84\x4c\x12\x32\xa4\x62\xb2\x90\x18\x9d\x77\x96\x25\xda\x00\x42\x52\x66\x19\x64\xd2\xb2\x00\x3d\x2c\x34\x84\x16\x96\x4c\xa1\x87\x7b\x7e\x7d\x69\x41\xc8\x07\x32\x0b\xaa\xc9\xff\xb1\x74\xa5\x21\x48\x08\xf9\xaf\x85\x1c\x2b\x98\x93\xff\x34\x04\x2c\x9d\x1e\x26\x32\xcb\x40\x2b\x18\x15\xda\x3a\x3b\x5a\x90\xf3\xe8\x4a\x75\xaf\xf4\x52\x41\x69\x32\x5b\x2f\x57\x5a\xc1\xdd\xed\x5b\x70\x32\xa7\xe6\x1d\xa9\x38\xd3\xd6\x83\xfe\x4e\xe6\xb8\x20\x3b\x00\x97\x96\xf9\x5c\xa1\xcc\xec\x00\xb0\x14\x52\x0f\xe0\x41\x0a\xd2\xdf\xf7\x00\x62\xad\x1c\xc6\x6e\xe6\xb7\x53\x8e\x32\x9b\x41\x51\x0b\x73\x88\x85\xfc\xd7\xdc\xe8\x88\x05\x16\x14\x84\x39\xcd\x60\xed\x55\x69\xb2\x19\xa4\xce\x15\x76\x36\x1a\xc5\x5a\x50\xd4\x7c\x1e\xe5\x46\x8f\x1a\x58\xc7\x36\x45\x34\x99\xec\xd1\xa3\x23\xa3\x30\xbb\xd0\xb1\x65\xac\x7e\xff\x51\x14\x8d\x70\xae\x4b\x77\xb4\x69\x68\x17\x57\xe7\xd7\x70\x73\xf1\x63\xcf\x92\x61\x83\x9c\xf5\x86\xeb\x28\x05\xe5\xba\x45\x59\x63\x19\x3e\x8c\xa3\xe3\xc9\x7c\x0b\x7b\x14\x2f\xe4\xe8\x61\x72\x30\x8c\xc9\x38\x9a\x7e\x13\x90\x85\x6e\xff\xdb\xb3\x0f\x0b\x19\x35\x28\x22\xa9\x78\x45\x81\x2e\xf5\xc2\x39\x1a\xd5\xe7\x37\xaa\x30\xcf\x8e\x82\x96\x16\x54\xab\x0b\xc0\xe1\xc2\x36\xff\x0f\x01\x0b\x59\xff\x6f\xcb\x3c\x47\x53\xcd\xfc\x71\xe8\xc8\xb3\xfe\xac\x0b\x32\xc8\xbf\x2f\xc5\x0c\xbc\xdc\xaf\x02\x9a\xfa\xbb\x21\x5b\x68\x65\x69\x05\x1b\xa0\x3f\x1d\x8f\xfb\xed\xcf\x0d\x2d\xed\x46\xc3\x0f\xdb\x17\x29\xd7\xdd\x09\xe0\xe8\xd1\x8d\x1e\x87\xcc\xd3\xfa\x07\x00\x1b\xa7\x94\xe3\xe6\x5b\x00\x57\x15\x34\x03\xeb\x8c\x54\x0b\x2f\x98\xd2\x92\x61\xd9\xfd\xea\xf4\x3d\xa9\x2f\x89\x86\x57\x6f\xca\xe6\x86\x5c\x69\x54\xf0\x14\xfc\xbd\x6f\x3d\x1f\x1e\x1e\x7c\xc7\x67\x2e\xc7\x7b\xa9\x16\xfe\x2d\x7b\x2e\xeb\x3d\x97\x2e\x1d\x20\x14\x68\xed\x52\x1b\xf1\x7d\xb4\x53\xa6\x85\xbc\x65\x30\xf5\xb7\x02\x0d\xe6\xe4\xbc\xf9\x36\x14\x1d\xfd\xa3\xa1\xe4\x68\x06\x47\xff\x30\x8a\x75\x5e\x68\x45\xca\xd9\x51\xbb\x72\x94\x68\x93\xa3\xbb\xe6\x17\x47\x4f\xd6\x0b\xbb\x94\x74\xe8\x3a\xb4\xec\x55\x0a\x16\x45\x26\x63\xcf\xc2\xe8\xf1\x70\xc5\xec\x58\x0a\x2b\x4f\x61\xc8\x96\x99\xfb\x92\x32\xd7\x1f\x7a\xc4\xbc\xe0\xe0\xf4\x5f\x57\x3f\xbd\x39\xfd\xe1\xf5\xbb\xcb\xff\xfe\x70\xb9\x97\xd2\x4f\x56\xab\x43\x49\x2d\x0c\x2b\xc9\xc9\xae\xfc\xda\x27\xd0\xba\xeb\xcb\x97\x68\xea\x9f\x8c\x27\xfb\x75\x50\x87\xca\xe6\x79\x8b\x4a\x69\x07\x8e\xb2\x0c\x30\x18\x5b\x04\x97\x39\x2e\xa4\x22\x40\xb0\x0e\x1d\x65\x64\x2d\x24\xf8\xb7\xbf\xa2\x20\x48\xa5\x60\x23\x44\xa8\x1d\x09\xcc\x31\xbe\x27\x25\xc0\xa5\xe8\x20\x45\x0b\x4a\x83\x14\x84\x1c\xc6\x6d\x19\xa7\x0c\x36\xf5\x5b\x38\x96\xb6\x36\x1d\xad\xd1\x71\xa5\xb2\x0a\x64\xe2\x0d\x04\x96\x68\x79\x6b\x4c\xd6\x26\x65\x36\x08\xe1\x77\x29\x2d\x71\x98\xe6\x53\x05\x08\xc7\xe3\xc9\xe8\x78\xfc\x2a\x3a\xe8\x70\x17\x19\xca\x83\xf5\x72\x98\x39\x9c\x8c\x27\xf5\xd9\xf4\x24\xb3\x10\x6d\x59\x14\xda\x38\x12\x03\x3e\xc0\xf0\xef\xb7\xb7\xd7\xf0\x6f\x68\x65\x1c\x79\x17\x11\x02\x28\x0a\xf1\x25\xef\xe0\x17\x6e\xb9\x4e\x21\x00\x57\x19\x4a\x04\xe7\x66\x51\xe6\x7c\x48\x43\xfe\x62\x53\x14\x24\xbc\x32\x16\x46\x97\x4a\x70\xf4\x07\x43\xbf\x95\xd2\x90\xd8\xed\x15\x84\xb8\xd6\xd6\x3d\xb3\x53\x38\x60\x57\x69\xb2\x8d\x2d\xe1\x78\xee\x72\xd9\x52\xcd\xe0\xb7\x92\x4c\xd5\xdb\x69\xcd\xb7\x9c\x38\x36\x09\xa3\x74\x94\x47\x70\x9b\x4a\x0b\x89\xa4\x4c\x70\xfa\x57\xaa\x44\x1b\x57\x2a\x36\xe3\xca\xe3\x11\xd0\xef\x80\xe8\x77\x34\xcc\x3e\x96\x05\xb8\x44\x23\x2c\x30\xed\xe8\xe4\x5c\x66\xd2\xd5\x49\x22\x23\x11\xab\xac\x2b\xa4\xa5\xe1\x69\x04\x3d\x03\x67\x4a\xea\xed\x37\xb1\xdd\xc2\x09\xeb\xec\xc8\xe7\xc1\x9b\x62\xe1\x14\x45\x09\x12\x87\xca\xe4\xa2\xfd\xb1\x2e\x99\xb7\x98\x65\xcc\x7e\x03\xb0\xff\x39\x8e\x3b\x34\x7b\xde\x77\xf3\xfd\xd5\x0c\xd2\xa3\xdb\xe4\x8f\x8d\xff\x50\xde\xde\x87\xf4\x16\xca\x82\x53\xfa\xc9\x78\xbc\xbe\xfb\xab\xc9\xc1\xc5\x96\x11\xba\x43\x69\x89\x0d\xf9\xb3\xe4\x13\x5e\x2f\x4a\xc7\xa6\xd7\x1e\xd1\x0b\x4a\xb0\xcc\x9c\x65\x52\xe3\xd2\x18\x52\xce\xaf\x8d\xe0\x02\x1d\x59\x87\x79\x61\x3b\xa4\xe6\xda\xe7\xe9\xa8\x60\x32\x86\x5c\xaa\xd2\x57\x1f\x29\xa1\xf0\xae\xd4\x27\x9c\x01\xd7\x92\x73\xf2\x39\x1f\x6f\x2e\x97\x3a\xd0\xc3\xa2\x0e\x4c\x5e\xfe\x64\xe9\x08\x74\xc4\x00\x36\x45\x64\xa8\xc8\x30\xa6\x43\xe5\x74\x13\x96\x03\xaa\x0a\xe8\x51\x5a\xc7\xc1\xa0\x91\x52\x73\xb0\xa4\x85\xbb\x9b\xf7\x2b\x99\xf1\xd1\xad\xc8\x76\xbd\xfb\x25\xcb\xc0\x73\xab\xf4\x20\x88\xc0\xa5\x46\x2f\x39\xa8\x90\x31\xda\x70\xf8\x58\x81\xf5\x88\x9e\x6e\x18\x15\xd9\x5f\x95\xde\x64\xdc\xa6\x68\x0e\x3f\x87\x1f\xf0\x9e\x5a\x82\x8a\x72\x9e\xc9\x78\x8d\xc1\x7e\x45\xb6\x0f\xa5\xf2\xf1\x95\x53\x3e\x1f\x3e\x49\xe1\x3c\xeb\x60\x09\x35\x61\xdf\xe2\x03\x01\xb2\xde\x9b\x22\x95\x03\x6a\x61\xe4\x03\x3a\xea\x87\xed\x96\x1c\x0b\x77\x00\x52\xc1\x32\x95\x71\x0a\x31\x5a\x76\x59\x1e\x65\x07\x22\x23\x57\xba\xff\xcc\xe2\x71\xda\x10\x7e\x85\x78\x98\x07\xe6\x6d\x25\x23\x64\x7f\xcd\x30\xd6\xc5\xf4\x7c\x94\x1e\x92\xb1\xee\x86\xb7\xda\x39\xba\xd0\xca\x9f\x88\xa3\xb6\x22\x7e\x52\x40\x6f\xf2\x7d\xad\x08\x38\xb9\xe7\xd3\xef\x17\x72\xb5\x8d\x60\xa5\x5a\x64\x04\x02\x2b\xc8\xd1\xc5\x3e\x83\x62\x61\x61\x13\xf7\x23\xb8\x4c\x56\x64\x2b\x0d\x7c\x5a\x19\x50\x69\x32\x96\xda\x42\x3e\x90\x1a\xd4\x6f\x13\xc8\xb5\x75\x60\x28\x66\x2f\xd1\x39\x7b\xc1\x8f\x94\xb6\x4d\x11\xd6\x74\x74\x99\xf8\x4a\x83\x44\x38\xa6\x08\x15\xb9\x55\xe9\x7f\x77\xf3\x7e\xe0\xcb\x46\xf8\xe9\x87\x5b\x4f\x9b\x0f\x5f\xbe\xb5\xb1\x28\xc9\xb6\xa7\x8f\xa5\x11\x7a\x16\xbc\xea\xee\xe6\xfd\xae\x74\x64\x41\xee\x45\xd2\x91\x55\x90\x39\xd4\x30\x13\x99\x39\x32\x30\xaf\xea\x28\xe3\x52\x43\xf4\x07\xc6\x19\xe3\x0d\xa5\x2e\x08\xda\xf8\x42\x82\x0d\xc5\x7b\x4e\x81\xd5\x37\x39\xf9\x27\xe4\x6e\x57\xc5\x56\x1c\xcf\xc9\xe1\xa1\x3c\x49\x15\x67\xa5\xe0\x0a\x23\x4e\x51\x2d\xd8\x47\x39\x8a\x7d\x34\xb5\x72\xa1\x7c\x37\x8a\xbd\x18\x7a\xa8\x80\xce\x19\x39\x2f\xdd\xd3\x63\xd9\xd7\xfb\x81\x75\x9b\xd0\xfa\x85\x0a\xd6\xcf\x93\xed\x1d\x42\xd7\xdb\x08\xca\xc8\xd1\x93\x1c\xce\x85\xdf\xda\x2d\x22\x76\x1d\xc3\x80\xe0\xcf\x51\x18\x3c\xaf\xbb\x66\x11\x1d\xe2\xad\x3b\x27\x7d\xcb\x59\xaf\x77\x59\xbb\xbd\x1a\xef\xe3\x30\xd3\x6a\xd1\xd6\x0a\xaa\xcc\xe7\x64\xfc\xc2\x55\x4f\x14\x42\x40\xaf\x60\x49\x66\xdd\xf3\x6e\x7a\xc3\xdb\x96\x8e\x3f\xae\x63\xc3\x59\x56\xd7\xf3\xfd\x8e\xdd\x9a\x0d\xbc\xb5\x24\x3e\xdb\x34\x71\xb8\xd8\xdd\x31\x09\x35\x3d\x1a\x83\xd5\xce\xef\x5c\x20\xed\x84\xd8\x6e\xd6\xf3\x4f\x14\x6f\x37\x8f\x0e\x21\x2b\x3c\xb1\x2e\x37\xc5\xb6\xfe\xec\x91\x46\xfb\xac\xdc\xe0\x46\x99\xb9\x8f\x64\xa9\x1c\x2d\xd6\xea\x81\xcd\xa7\x6d\x67\xec\x5d\xb4\x57\xa6\xcf\x4e\xf4\x8a\x98\xe0\x6d\xeb\x13\x7b\x98\xc7\xdb\x75\x68\x1b\x87\xa7\xda\xb2\xc3\xe1\xe2\x33\x5e\xef\x76\x95\x24\xfc\xbe\xe9\xc7\x73\x75\x0f\xda\x2c\xe3\x05\x3c\xa7\x21\x66\xe5\x69\xce\x93\x77\xb2\x1e\x1c\x2e\x06\x9c\xa3\x26\x3a\x13\x20\x1d\x47\x78\xa7\x0f\x52\x50\xc0\xfe\x72\x0a\xd2\xd9\xc1\x85\x4b\x5f\x69\x36\x66\x9f\x95\x73\xa6\xad\xb4\x0b\x75\x96\x25\x65\xa5\x93\x0f\xd4\x7f\x41\xcd\x36\x04\x2b\x5a\x1e\x9c\x6c\x25\x40\x79\xe1\xaa\x01\x93\xea\x0b\x09\x9f\xf8\xa7\x58\x14\x9d\x3e\xfc\x9f\xd9\x08\xdb\x4f\xbc\x77\x53\xf7\x1d\xb5\x36\xa0\x83\x8c\xc2\x87\xde\x6e\x21\x6d\x32\xf6\x79\xb6\x02\xa8\xc0\x59\x93\xa6\xac\x23\x2b\x4d\xb6\x07\xd3\x4e\xc9\x7e\x1d\xfa\xbb\x9b\xf7\xeb\xb8\xaf\x0a\x77\x28\xfa\x27\x61\xda\xd0\x1d\xab\x61\xb6\xab\x42\x3c\x07\xc5\x92\xc9\x56\x1b\xea\x45\x5b\x59\xc2\x67\x32\x84\x5d\xd9\xc1\x8e\xb0\xb2\xf7\x0e\x67\x7f\xf0\x8d\xb5\xa0\xed\xe8\xd4\xc4\x99\xad\x0f\x43\x10\x5a\x6d\x47\xa8\x21\x58\x9d\x53\x7d\x72\xb8\x80\x5e\x1a\xbd\xe3\x6a\x60\x4f\x24\xdc\x8e\x7f\xb5\xa8\xc3\xe2\x4e\x78\xdd\x71\xf1\xb0\x26\xeb\x50\x8e\x4e\x4f\x4e\xb8\x68\x32\x18\xf3\x09\x88\xe0\x03\x56\xc1\x05\x69\xe5\x50\x2a\x88\x75\x9e\xa3\x65\x2f\xbb\x4c\xa5\x23\x5b\x60\x4c\x11\x5c\x67\x84\xb6\x65\x6d\x4e\x80\x4b\x0c\xfd\x46\x17\x72\xd7\x39\x2d\xa4\x52\xb2\xc9\x5f\x11\x0a\x32\x52\x87\x7b\x04\x67\x08\x1d\x89\x4e\xc7\xc9\x57\xf9\xce\xc8\x45\x37\xbf\xb0\x05\xc5\x12\xb3\xd5\x1a\x87\x0b\xb0\x94\xa3\x72\x32\xae\x7b\x79\x77\x37\xef\x0f\x65\x17\x2d\x08\x4a\xa4\x22\xc1\xb5\xf8\xcd\x8f\x6f\xe1\xd5\xd9\x9b\xd3\x88\x73\x52\xbd\x24\x11\xc4\x48\xd6\x13\x98\x3a\x57\x84\x66\x84\x1d\xc0\x27\x7c\xc0\x00\x67\xb0\x22\x2d\x47\x99\x39\x3d\x80\xc4\x15\x9e\xf4\x44\x66\x14\xf9\x81\x91\x8f\x98\xa0\x91\x43\x4f\x7b\x22\x63\x48\x68\x05\xdb\xcf\x8f\xd4\xd8\xe6\xa5\xf3\x6e\xb3\x2b\xc2\x8e\x58\x10\x6c\xa5\xb4\xaa\x72\xdf\x08\x66\x42\x02\xbf\x61\xb2\xe5\x1b\x14\x0c\x59\x63\x6b\x8e\x1e\xdd\xd7\x41\x3a\x3d\x39\x79\x75\xba\x09\x2b\x82\x73\x55\xb1\x1e\xec\xaa\xff\xe3\x07\x3d\x32\xa9\xee\x65\x22\x49\xc0\x32\xed\x84\x05\x21\x6d\x91\x61\xd5\x94\x29\x4d\x4f\xf8\x50\x42\xfa\xab\x89\x10\x87\x79\xe1\x03\xbe\xbf\x9f\xf1\xee\x74\x06\xd3\xf1\x64\x3c\x9c\x4c\x87\x93\xc9\xed\xe4\x6c\x76\xfc\x66\x36\x9e\xfe\x4f\x04\xbf\x60\x26\xfd\x94\x4d\x6b\xb0\xc6\x77\x09\xa4\x85\x77\xa8\x60\x32\x80\x09\x9c\x5f\x30\x8b\xef\x50\x95\x68\x2a\x7e\x35\x9d\x8c\xc7\xf0\x1d\xeb\xc9\x12\xf9\xe1\x1d\x98\x53\xa6\x97\x61\xa4\x00\x92\x30\xea\xb2\xa2\xc5\x7e\x1f\x35\x71\x7a\x95\x78\xf6\x77\xd1\xd3\x5f\x31\xfe\x55\x4c\xfb\xce\xdb\x7e\x7e\x23\xf8\xc8\x49\x51\xe0\x8b\x4d\xbd\x16\x2c\x53\xdb\x66\x10\xbb\x28\x0b\xdf\x42\x43\xe3\x50\x8a\xb8\x1a\xcd\xa4\x23\x83\x59\xbd\xaa\xee\x3e\x6b\xd3\xed\xaf\xb6\xe8\x9a\x77\xb9\x38\x39\x14\xc7\xab\x69\x6b\x6a\x90\xd2\x23\x0a\x8a\x25\x87\x86\x0f\x17\x27\x90\xa2\x4d\xfd\xa6\xba\x26\x59\x07\xba\x5e\xa8\x6c\x74\x8a\xfc\xa7\x20\xc9\x46\x5e\xe3\x28\x9a\xfe\xff\xab\x69\x27\xfa\x7f\x8b\x20\x3e\x59\xad\x82\x24\x1e\xf3\x6c\x4b\x14\xfc\x75\x05\xc9\x37\xa5\x67\xec\xea\xfd\x2b\xdf\x67\x59\x47\xdd\xad\x31\x77\x05\x26\xb1\x56\x02\xee\xb9\x6b\xde\x0a\x25\xfb\x8b\xa8\x43\x6c\x17\xb6\xcb\xb8\x67\x44\xbc\xa4\xb9\xa0\x87\xd5\x97\xd2\xb6\xda\x7d\x66\x4c\x9d\xb1\x99\x8d\x82\x7d\x67\x89\xbe\x81\x22\xe4\x0f\x45\xdb\xd9\xda\x97\x39\xa4\x86\x92\x8d\x21\x82\x7d\x23\x01\x3b\x62\xfe\xe7\xea\xdd\x15\x27\x1c\x20\x66\xa3\xd1\x72\xb9\x8c\x52\xbd\x74\xda\xdf\x25\x52\x14\xeb\xa8\xbc\x1f\xb9\xd2\x69\x23\x31\x0b\xd7\xa5\x64\xa4\xa5\xa8\x48\x8b\x7f\x11\x3a\xff\xe7\x49\x07\x5e\xd7\xb0\x5f\x96\xdc\x77\xf8\x80\x1f\x3d\x2e\xb8\xb8\xfa\x00\x86\xea\x49\xc4\x35\x25\x85\x4b\xe5\x17\xa6\x44\xe8\x7c\x27\x7a\xf6\x2f\x2f\x8c\x3a\x1e\x4f\x5f\xbd\x11\xf1\x38\x3e\x3e\x4e\xc6\xaf\x05\x92\x10\x67\x38\x49\xc4\xd9\x7c\x2e\x88\xe6\xdd\x1b\xbb\x9c\x1c\xbe\x30\x35\x67\xd3\xb3\x93\x33\x3c\x3b\x4d\xc4\xe9\xd9\xe4\xf8\x34\x3e\x49\xe8\x75\x3c\x17\x74\x4a\x27\xaf\xa7\xe3\x64\xda\xd9\xe5\xc7\x67\xec\x0b\xd3\x73\xd2\xed\x20\x6d\xf5\x8c\x5e\xc4\x0e\xda\x3c\x6f\xd3\x07\x85\x8b\xef\x17\x26\x81\x6b\xd9\x93\xe1\x64\x32\x9c\xbe\xb9\x1d\x9f\xcc\xa6\xa7\xb3\xf1\x59\x34\x1e\x8f\xbd\xd3\xb5\x14\x97\x46\xba\xea\x63\x48\x52\x03\x02\x3f\x0c\x74\x5e\xba\x74\x3d\x64\xb0\x33\xe8\xd6\x6a\x34\x83\x39\xaf\xf4\xef\x78\xb9\x1f\xde\xdb\x08\x33\x85\xfc\x99\xaa\x3d\x15\x5f\xf0\x74\x58\xba\xf4\xd7\xee\xac\xdd\xbe\x39\xb0\xf3\x30\xc3\x44\x9c\xa6\xd7\x13\x0d\x7e\xb0\xc9\x4f\x4f\xdb\x54\x1b\x07\xba\xc0\xdf\x4a\x02\x29\x78\x51\x22\xdb\x78\xcc\xd1\x77\x05\xa8\xcf\x0e\xda\x23\xbf\xbd\xfa\xf9\x87\xff\xe8\xd7\x43\xc6\xfc\xdc\x59\xce\x3f\x63\x54\x90\x48\x3f\x2c\x46\xd2\x74\xe6\x1b\xfd\x4d\x16\xbf\xaa\xaf\xb0\x2d\x14\xb8\x08\x09\x7a\xe5\x77\x71\x0d\x4d\x1d\xcf\x8d\xa0\x68\xd9\x0c\x60\x39\x3f\x5b\xc0\x2a\xff\xa7\x90\x6e\xf9\xc4\x56\xaa\x07\xce\x23\x7d\x21\xe2\x61\x17\x86\x1e\x9a\x09\x96\x66\x06\xad\x23\x84\x8a\xf7\x1a\x31\x2c\xd0\xb8\x0a\x2c\xd7\x4e\xdd\x91\xcb\x9a\x02\x7f\x3d\x3b\xa7\x14\xb3\x04\x74\xd2\x4e\x7a\x33\xeb\x6d\xbb\xda\x5f\x76\xa2\x02\x5d\x3a\x2b\x05\x35\xd3\x1b\x1f\xee\x3e\xde\xfa\xd9\x30\x4f\xe5\x86\xd0\xeb\x71\x70\xa9\xac\x0b\x33\x1f\x6d\x5d\xc5\xf1\xa0\xbe\xff\xad\xaf\x1b\x9a\x81\xcf\x08\x7e\x91\x3a\x43\xa7\x4d\x9b\xce\xcf\x33\x1d\xdf\x93\x08\x44\x94\xb6\xde\xd9\x72\x7a\x7d\x19\xf5\x1a\xfb\x9c\xf5\x86\x1d\x13\x83\xff\xfd\xbf\xde\xb0\x63\xa6\xfc\x3b\xf4\xf7\x9a\xb6\x53\x98\xca\xdd\x9c\x9a\xde\x98\xbb\xee\xce\x0f\x37\x63\xbc\xeb\x63\x5b\x29\x81\x36\x72\x21\x15\x66\xeb\x73\xfe\x7f\x0f\x00\x00\xff\xff\x16\x11\x5a\xe5\x25\x30\x00\x00")

func openapiYamlBytes() ([]byte, error) {
	return bindataRead(
		_openapiYaml,
		"openapi.yaml",
	)
}

func openapiYaml() (*asset, error) {
	bytes, err := openapiYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "openapi.yaml", size: 12325, mode: os.FileMode(420), modTime: time.Unix(1554136024, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"doap.rdf":     doapRdf,
	"openapi.yaml": openapiYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"doap.rdf":     &bintree{doapRdf, map[string]*bintree{}},
	"openapi.yaml": &bintree{openapiYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
